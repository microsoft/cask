global using static CommonAnnotatedSecurityKeys.InternalConstants;

using System.Security.Cryptography;

namespace CommonAnnotatedSecurityKeys;

/// <summary>
/// Constants which are currently internal to the implementation.
/// </summary>
/// <remarks>
/// Move things elsewhere if/when they need to be made public, and avoid `const` in 
/// public API in favor of static readonly properties.
/// </remarks>
internal static partial class InternalConstants
{
    /// <summary>
    /// The base64-encoded CASK signature "JQQJ" in UTF-16.)
    /// </summary>
    public static ReadOnlySpan<char> CaskSignature => "JQQJ".AsSpan();

    /// <summary>
    /// The base64-encoded CASK signature "JQQJ" in UTF-8.
    /// </summary>
    public static ReadOnlySpan<byte> CaskSignatureUtf8 => "JQQJ"u8;

    /// <summary>
    /// The base64-decoded CASK signature "JQQJ" in bytes.
    /// </summary>
    public static ReadOnlySpan<byte> CaskSignatureBytes => [0x25, 0x04, 0x09];

    /// <summary>
    /// The number of bytes in a CASK signature
    /// </summary>
    public const int CaskSignatureSizeInBytes = 3;

    /// <summary>
    /// The number of bytes used to store the timestamp in a key.
    /// </summary>
    public const int TimestampSizeInBytes = 3;

    /// <summary>
    /// The number of bytes in a provider signature.
    /// </summary>
    public const int ProviderSignatureSizeInBytes = 3;

    /// <summary>
    /// The number of bytes reserved in the key footer for future use.
    /// </summary>
    public const int VersionAndKindSizeInBytes = 2;

    /// <summary>
    /// The number of bytes for the CRC32 of the key.
    /// </summary>
    public const int Crc32SizeInBytes = 4;

    /// <summary>
    /// The number of bytes in the fixed components of a primary key, from the CASK signature to the end of the key.
    /// </summary>
    public const int FixedKeyComponentSizeInBytes =
        CaskSignatureSizeInBytes +
        ProviderSignatureSizeInBytes +
        TimestampSizeInBytes +
        VersionAndKindSizeInBytes +
        Crc32SizeInBytes;

    /// <summary>
    /// The number of bytes in the fixed components of a hash key, from the C3ID to the end of the key.
    /// </summary>
    public const int FixedHashComponentSizeInBytes = FixedKeyComponentSizeInBytes + CrossCompanyCorrelatingId.RawSizeInBytes;

    /// <summary>
    /// The number of bytes of entropy in a primary key. 32-bytes (256 bits) of
    /// entropy generated by a cryptographically secure RNG are currently deemed
    /// unbreakable even in a post-quantum world. 
    /// 
    /// Currently this value is fixed, but may become configurable in future versions.
    /// </summary>
    public const int SecretEntropyInBytes = 32;

    /// <summary>
    /// The size of the entropy in a primary after padding to 3-byte alignment.
    /// </summary>
    public static int PaddedSecretEntropyInBytes { get; } = RoundUpTo3ByteAlignment(SecretEntropyInBytes);

    /// <summary>
    /// The size of the HMAC-SHA256 hash after padding to 3-byte alignment.
    /// </summary>
    public static int PaddedHmacSha256SizeInBytes { get; } = RoundUpTo3ByteAlignment(HMACSHA256.HashSizeInBytes);

    /// <summary>
    /// The maximum amount of bytes that the implementation will stackalloc.
    /// </summary>
    public const int MaxStackAlloc = 256;

    /// <summary>
    /// The number of least significant bits reserved in the key kind byte.
    /// </summary>
    public const int KindReservedBits = 2;

    /// <summary>
    /// A bit mask to obtain the reserved bits from the key kind.
    /// </summary>
    public const int KindReservedMask = (1 << KindReservedBits) - 1;

    /// <summary>
    /// The range of byte indices in a hash for the bytes that contain the C3ID of the secret.
    /// </summary>
    public static Range C3IdByteRange => ^27..^15;

    /// <summary>
    /// The range of byte indices in a key for the bytes that contain the CASK signature.
    /// </summary>
    public static Range CaskSignatureByteRange => ^15..^12;

    /// <summary>
    /// The range of byte indices in a key for the bytes that contain the provider signature.
    /// </summary>
    public static Range ProviderSignatureByteRange => ^12..^9;

    /// <summary>
    /// The range of byte indices in a key for the bytes that contain the timestamp.
    /// </summary>
    public static Range TimestampByteRange => ^9..^6;

    /// <summary>
    /// The index of the byte in a key that contains the key kind.
    /// </summary>
    public static Index KindByteIndex = ^6;

    /// <summary>
    /// The index of the byte in a key that is currently reserved to be zeroed
    /// out, and may be used in the future to indicate a format change.
    /// </summary>
    public static Index ReservedVersionByteIndex => ^5;

    /// <summary>
    /// The range of byte indices in a key for the bytes that contain the CRC32 of the key.
    /// </summary>
    public static Range Crc32ByteRange => ^4..;

    /// <summary>
    /// The range of chars in a base64-encoded key that hold the Cask signature.
    /// </summary>
    public static Range CaskSignatureCharRange = ^20..^16;

    /// <summary>
    /// The range of chars in a base64-encoded key that hold the timestamp.
    /// </summary>
    public static Range TimestampCharRange = ^12..^8;

    /// <summary>
    /// The index of the kind char in a base64-encoded key.
    /// </summary>
    public static Index KindCharIndex => ^8;

    /// <summary>
    /// The index of the version char in a base64-encoded key.
    /// </summary>
    public static Index VersionCharIndex => ^7;
}
